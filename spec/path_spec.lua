local tmp_dir = vim.uv.os_tmpdir() .. "/neovim-flake-busted"

local function clear() os.execute("rm -rf " .. tmp_dir) end

-- generated by nix
package.loaded["pde.system"] = {
    notes_path = tmp_dir .. "/notes",
    spell_path = tmp_dir .. "/spell",
}

describe("paths", function()
    before_each(function() clear() end)
    after_each(function() clear() end)

    it("creates notes path properly", function()
        -- act
        local actual_path = require("pde.paths").get_notes()

        -- assert
        assert.are.same(tmp_dir .. "/notes", actual_path)
        assert.are.same(vim.fn.isdirectory(actual_path), 1)
    end)

    it("caches notes path properly", function()
        -- act
        local actual_path = require("pde.paths").get_notes()

        -- assert
        assert.are.same(tmp_dir .. "/notes", actual_path)
        assert.are.same(vim.fn.isdirectory(actual_path), 0)
    end)

    it("creates spell path properly", function()
        -- act
        local actual_path = require("pde.paths").get_spellfile()

        -- assert
        -- FIXME
        assert.are.same(tmp_dir .. "/spell/spell", actual_path)
        assert.are.same(vim.fn.isdirectory(actual_path), 1)
    end)

    it("caches spell path properly", function()
        -- act
        local actual_path = require("pde.paths").get_spellfile()

        -- assert
        -- FIXME
        assert.are.same(tmp_dir .. "/spell/spell", actual_path)
        assert.are.same(vim.fn.isdirectory(actual_path), 0)
    end)

    it("returns expected spell file properly", function()
        -- act
        local actual_path = require("pde.paths").get_spellfile("pl")

        -- assert
        assert.are.same(tmp_dir .. "/spell/spell/pl.utf-8.add", actual_path)
    end)
end)
